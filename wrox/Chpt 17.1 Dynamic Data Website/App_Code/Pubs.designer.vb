'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.269
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="PUBS")>  _
Partial Public Class PubsDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub Insertauthor(instance As author)
    End Sub
  Partial Private Sub Updateauthor(instance As author)
    End Sub
  Partial Private Sub Deleteauthor(instance As author)
    End Sub
  Partial Private Sub Inserttitle(instance As title)
    End Sub
  Partial Private Sub Updatetitle(instance As title)
    End Sub
  Partial Private Sub Deletetitle(instance As title)
    End Sub
  Partial Private Sub Insertemployee(instance As employee)
    End Sub
  Partial Private Sub Updateemployee(instance As employee)
    End Sub
  Partial Private Sub Deleteemployee(instance As employee)
    End Sub
  Partial Private Sub Insertjob(instance As job)
    End Sub
  Partial Private Sub Updatejob(instance As job)
    End Sub
  Partial Private Sub Deletejob(instance As job)
    End Sub
  Partial Private Sub Insertpub_info(instance As pub_info)
    End Sub
  Partial Private Sub Updatepub_info(instance As pub_info)
    End Sub
  Partial Private Sub Deletepub_info(instance As pub_info)
    End Sub
  Partial Private Sub Insertpublisher(instance As publisher)
    End Sub
  Partial Private Sub Updatepublisher(instance As publisher)
    End Sub
  Partial Private Sub Deletepublisher(instance As publisher)
    End Sub
  Partial Private Sub Insertsale(instance As sale)
    End Sub
  Partial Private Sub Updatesale(instance As sale)
    End Sub
  Partial Private Sub Deletesale(instance As sale)
    End Sub
  Partial Private Sub Insertstore(instance As store)
    End Sub
  Partial Private Sub Updatestore(instance As store)
    End Sub
  Partial Private Sub Deletestore(instance As store)
    End Sub
  Partial Private Sub Inserttitleauthor(instance As titleauthor)
    End Sub
  Partial Private Sub Updatetitleauthor(instance As titleauthor)
    End Sub
  Partial Private Sub Deletetitleauthor(instance As titleauthor)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("PUBSConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property authors() As System.Data.Linq.Table(Of author)
		Get
			Return Me.GetTable(Of author)
		End Get
	End Property
	
	Public ReadOnly Property titles() As System.Data.Linq.Table(Of title)
		Get
			Return Me.GetTable(Of title)
		End Get
	End Property
	
	Public ReadOnly Property discounts() As System.Data.Linq.Table(Of discount)
		Get
			Return Me.GetTable(Of discount)
		End Get
	End Property
	
	Public ReadOnly Property employees() As System.Data.Linq.Table(Of employee)
		Get
			Return Me.GetTable(Of employee)
		End Get
	End Property
	
	Public ReadOnly Property jobs() As System.Data.Linq.Table(Of job)
		Get
			Return Me.GetTable(Of job)
		End Get
	End Property
	
	Public ReadOnly Property pub_infos() As System.Data.Linq.Table(Of pub_info)
		Get
			Return Me.GetTable(Of pub_info)
		End Get
	End Property
	
	Public ReadOnly Property publishers() As System.Data.Linq.Table(Of publisher)
		Get
			Return Me.GetTable(Of publisher)
		End Get
	End Property
	
	Public ReadOnly Property royscheds() As System.Data.Linq.Table(Of roysched)
		Get
			Return Me.GetTable(Of roysched)
		End Get
	End Property
	
	Public ReadOnly Property sales() As System.Data.Linq.Table(Of sale)
		Get
			Return Me.GetTable(Of sale)
		End Get
	End Property
	
	Public ReadOnly Property stores() As System.Data.Linq.Table(Of store)
		Get
			Return Me.GetTable(Of store)
		End Get
	End Property
	
	Public ReadOnly Property titleauthors() As System.Data.Linq.Table(Of titleauthor)
		Get
			Return Me.GetTable(Of titleauthor)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.authors")>  _
Partial Public Class author
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _au_id As String
	
	Private _au_lname As String
	
	Private _au_fname As String
	
	Private _phone As String
	
	Private _address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zip As String
	
	Private _contract As Boolean
	
	Private _titleauthors As EntitySet(Of titleauthor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onau_idChanging(value As String)
    End Sub
    Partial Private Sub Onau_idChanged()
    End Sub
    Partial Private Sub Onau_lnameChanging(value As String)
    End Sub
    Partial Private Sub Onau_lnameChanged()
    End Sub
    Partial Private Sub Onau_fnameChanging(value As String)
    End Sub
    Partial Private Sub Onau_fnameChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnaddressChanging(value As String)
    End Sub
    Partial Private Sub OnaddressChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OnzipChanging(value As String)
    End Sub
    Partial Private Sub OnzipChanged()
    End Sub
    Partial Private Sub OncontractChanging(value As Boolean)
    End Sub
    Partial Private Sub OncontractChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._titleauthors = New EntitySet(Of titleauthor)(AddressOf Me.attach_titleauthors, AddressOf Me.detach_titleauthors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_au_id", DbType:="VarChar(11) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property au_id() As String
		Get
			Return Me._au_id
		End Get
		Set
			If (String.Equals(Me._au_id, value) = false) Then
				Me.Onau_idChanging(value)
				Me.SendPropertyChanging
				Me._au_id = value
				Me.SendPropertyChanged("au_id")
				Me.Onau_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_au_lname", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property au_lname() As String
		Get
			Return Me._au_lname
		End Get
		Set
			If (String.Equals(Me._au_lname, value) = false) Then
				Me.Onau_lnameChanging(value)
				Me.SendPropertyChanging
				Me._au_lname = value
				Me.SendPropertyChanged("au_lname")
				Me.Onau_lnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_au_fname", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property au_fname() As String
		Get
			Return Me._au_fname
		End Get
		Set
			If (String.Equals(Me._au_fname, value) = false) Then
				Me.Onau_fnameChanging(value)
				Me.SendPropertyChanging
				Me._au_fname = value
				Me.SendPropertyChanged("au_fname")
				Me.Onau_fnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_phone", DbType:="Char(12) NOT NULL", CanBeNull:=false)>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_address", DbType:="VarChar(40)")>  _
	Public Property address() As String
		Get
			Return Me._address
		End Get
		Set
			If (String.Equals(Me._address, value) = false) Then
				Me.OnaddressChanging(value)
				Me.SendPropertyChanging
				Me._address = value
				Me.SendPropertyChanged("address")
				Me.OnaddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(20)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="Char(2)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zip", DbType:="Char(5)")>  _
	Public Property zip() As String
		Get
			Return Me._zip
		End Get
		Set
			If (String.Equals(Me._zip, value) = false) Then
				Me.OnzipChanging(value)
				Me.SendPropertyChanging
				Me._zip = value
				Me.SendPropertyChanged("zip")
				Me.OnzipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_contract", DbType:="Bit NOT NULL")>  _
	Public Property contract() As Boolean
		Get
			Return Me._contract
		End Get
		Set
			If ((Me._contract = value)  _
						= false) Then
				Me.OncontractChanging(value)
				Me.SendPropertyChanging
				Me._contract = value
				Me.SendPropertyChanged("contract")
				Me.OncontractChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="author_titleauthor", Storage:="_titleauthors", ThisKey:="au_id", OtherKey:="au_id")>  _
	Public Property titleauthors() As EntitySet(Of titleauthor)
		Get
			Return Me._titleauthors
		End Get
		Set
			Me._titleauthors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_titleauthors(ByVal entity As titleauthor)
		Me.SendPropertyChanging
		entity.author = Me
	End Sub
	
	Private Sub detach_titleauthors(ByVal entity As titleauthor)
		Me.SendPropertyChanging
		entity.author = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.titles")>  _
Partial Public Class title
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _title_id As String
	
	Private _title As String
	
	Private _type As String
	
	Private _pub_id As String
	
	Private _price As System.Nullable(Of Decimal)
	
	Private _advance As System.Nullable(Of Decimal)
	
	Private _royalty As System.Nullable(Of Integer)
	
	Private _ytd_sales As System.Nullable(Of Integer)
	
	Private _notes As String
	
	Private _pubdate As Date
	
	Private _sales As EntitySet(Of sale)
	
	Private _titleauthors As EntitySet(Of titleauthor)
	
	Private _publisher As EntityRef(Of publisher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Ontitle_idChanging(value As String)
    End Sub
    Partial Private Sub Ontitle_idChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OntypeChanging(value As String)
    End Sub
    Partial Private Sub OntypeChanged()
    End Sub
    Partial Private Sub Onpub_idChanging(value As String)
    End Sub
    Partial Private Sub Onpub_idChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    Partial Private Sub OnadvanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnadvanceChanged()
    End Sub
    Partial Private Sub OnroyaltyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnroyaltyChanged()
    End Sub
    Partial Private Sub Onytd_salesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onytd_salesChanged()
    End Sub
    Partial Private Sub OnnotesChanging(value As String)
    End Sub
    Partial Private Sub OnnotesChanged()
    End Sub
    Partial Private Sub OnpubdateChanging(value As Date)
    End Sub
    Partial Private Sub OnpubdateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._sales = New EntitySet(Of sale)(AddressOf Me.attach_sales, AddressOf Me.detach_sales)
		Me._titleauthors = New EntitySet(Of titleauthor)(AddressOf Me.attach_titleauthors, AddressOf Me.detach_titleauthors)
		Me._publisher = CType(Nothing, EntityRef(Of publisher))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title_id", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property title_id() As String
		Get
			Return Me._title_id
		End Get
		Set
			If (String.Equals(Me._title_id, value) = false) Then
				Me.Ontitle_idChanging(value)
				Me.SendPropertyChanging
				Me._title_id = value
				Me.SendPropertyChanged("title_id")
				Me.Ontitle_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_type", DbType:="Char(12) NOT NULL", CanBeNull:=false)>  _
	Public Property type() As String
		Get
			Return Me._type
		End Get
		Set
			If (String.Equals(Me._type, value) = false) Then
				Me.OntypeChanging(value)
				Me.SendPropertyChanging
				Me._type = value
				Me.SendPropertyChanged("type")
				Me.OntypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pub_id", DbType:="Char(4)")>  _
	Public Property pub_id() As String
		Get
			Return Me._pub_id
		End Get
		Set
			If (String.Equals(Me._pub_id, value) = false) Then
				If Me._publisher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onpub_idChanging(value)
				Me.SendPropertyChanging
				Me._pub_id = value
				Me.SendPropertyChanged("pub_id")
				Me.Onpub_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Money")>  _
	Public Property price() As System.Nullable(Of Decimal)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_advance", DbType:="Money")>  _
	Public Property advance() As System.Nullable(Of Decimal)
		Get
			Return Me._advance
		End Get
		Set
			If (Me._advance.Equals(value) = false) Then
				Me.OnadvanceChanging(value)
				Me.SendPropertyChanging
				Me._advance = value
				Me.SendPropertyChanged("advance")
				Me.OnadvanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_royalty", DbType:="Int")>  _
	Public Property royalty() As System.Nullable(Of Integer)
		Get
			Return Me._royalty
		End Get
		Set
			If (Me._royalty.Equals(value) = false) Then
				Me.OnroyaltyChanging(value)
				Me.SendPropertyChanging
				Me._royalty = value
				Me.SendPropertyChanged("royalty")
				Me.OnroyaltyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ytd_sales", DbType:="Int")>  _
	Public Property ytd_sales() As System.Nullable(Of Integer)
		Get
			Return Me._ytd_sales
		End Get
		Set
			If (Me._ytd_sales.Equals(value) = false) Then
				Me.Onytd_salesChanging(value)
				Me.SendPropertyChanging
				Me._ytd_sales = value
				Me.SendPropertyChanged("ytd_sales")
				Me.Onytd_salesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notes", DbType:="VarChar(200)")>  _
	Public Property notes() As String
		Get
			Return Me._notes
		End Get
		Set
			If (String.Equals(Me._notes, value) = false) Then
				Me.OnnotesChanging(value)
				Me.SendPropertyChanging
				Me._notes = value
				Me.SendPropertyChanged("notes")
				Me.OnnotesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pubdate", DbType:="DateTime NOT NULL")>  _
	Public Property pubdate() As Date
		Get
			Return Me._pubdate
		End Get
		Set
			If ((Me._pubdate = value)  _
						= false) Then
				Me.OnpubdateChanging(value)
				Me.SendPropertyChanging
				Me._pubdate = value
				Me.SendPropertyChanged("pubdate")
				Me.OnpubdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="title_sale", Storage:="_sales", ThisKey:="title_id", OtherKey:="title_id")>  _
	Public Property sales() As EntitySet(Of sale)
		Get
			Return Me._sales
		End Get
		Set
			Me._sales.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="title_titleauthor", Storage:="_titleauthors", ThisKey:="title_id", OtherKey:="title_id")>  _
	Public Property titleauthors() As EntitySet(Of titleauthor)
		Get
			Return Me._titleauthors
		End Get
		Set
			Me._titleauthors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="publisher_title", Storage:="_publisher", ThisKey:="pub_id", OtherKey:="pub_id", IsForeignKey:=true)>  _
	Public Property publisher() As publisher
		Get
			Return Me._publisher.Entity
		End Get
		Set
			Dim previousValue As publisher = Me._publisher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._publisher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._publisher.Entity = Nothing
					previousValue.titles.Remove(Me)
				End If
				Me._publisher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.titles.Add(Me)
					Me._pub_id = value.pub_id
				Else
					Me._pub_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("publisher")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_sales(ByVal entity As sale)
		Me.SendPropertyChanging
		entity.title = Me
	End Sub
	
	Private Sub detach_sales(ByVal entity As sale)
		Me.SendPropertyChanging
		entity.title = Nothing
	End Sub
	
	Private Sub attach_titleauthors(ByVal entity As titleauthor)
		Me.SendPropertyChanging
		entity.title = Me
	End Sub
	
	Private Sub detach_titleauthors(ByVal entity As titleauthor)
		Me.SendPropertyChanging
		entity.title = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.discounts")>  _
Partial Public Class discount
	
	Private _discounttype As String
	
	Private _stor_id As String
	
	Private _lowqty As System.Nullable(Of Short)
	
	Private _highqty As System.Nullable(Of Short)
	
	Private _discount As Decimal
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discounttype", DbType:="VarChar(40) NOT NULL", CanBeNull:=false)>  _
	Public Property discounttype() As String
		Get
			Return Me._discounttype
		End Get
		Set
			If (String.Equals(Me._discounttype, value) = false) Then
				Me._discounttype = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stor_id", DbType:="Char(4)")>  _
	Public Property stor_id() As String
		Get
			Return Me._stor_id
		End Get
		Set
			If (String.Equals(Me._stor_id, value) = false) Then
				Me._stor_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lowqty", DbType:="SmallInt")>  _
	Public Property lowqty() As System.Nullable(Of Short)
		Get
			Return Me._lowqty
		End Get
		Set
			If (Me._lowqty.Equals(value) = false) Then
				Me._lowqty = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_highqty", DbType:="SmallInt")>  _
	Public Property highqty() As System.Nullable(Of Short)
		Get
			Return Me._highqty
		End Get
		Set
			If (Me._highqty.Equals(value) = false) Then
				Me._highqty = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(4,2) NOT NULL")>  _
	Public Property discount() As Decimal
		Get
			Return Me._discount
		End Get
		Set
			If ((Me._discount = value)  _
						= false) Then
				Me._discount = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.employee")>  _
Partial Public Class employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _emp_id As String
	
	Private _fname As String
	
	Private _minit As System.Nullable(Of Char)
	
	Private _lname As String
	
	Private _job_id As Short
	
	Private _job_lvl As System.Nullable(Of Byte)
	
	Private _pub_id As String
	
	Private _hire_date As Date
	
	Private _job As EntityRef(Of job)
	
	Private _publisher As EntityRef(Of publisher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onemp_idChanging(value As String)
    End Sub
    Partial Private Sub Onemp_idChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnminitChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnminitChanged()
    End Sub
    Partial Private Sub OnlnameChanging(value As String)
    End Sub
    Partial Private Sub OnlnameChanged()
    End Sub
    Partial Private Sub Onjob_idChanging(value As Short)
    End Sub
    Partial Private Sub Onjob_idChanged()
    End Sub
    Partial Private Sub Onjob_lvlChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub Onjob_lvlChanged()
    End Sub
    Partial Private Sub Onpub_idChanging(value As String)
    End Sub
    Partial Private Sub Onpub_idChanged()
    End Sub
    Partial Private Sub Onhire_dateChanging(value As Date)
    End Sub
    Partial Private Sub Onhire_dateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._job = CType(Nothing, EntityRef(Of job))
		Me._publisher = CType(Nothing, EntityRef(Of publisher))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_emp_id", DbType:="Char(9) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property emp_id() As String
		Get
			Return Me._emp_id
		End Get
		Set
			If (String.Equals(Me._emp_id, value) = false) Then
				Me.Onemp_idChanging(value)
				Me.SendPropertyChanging
				Me._emp_id = value
				Me.SendPropertyChanged("emp_id")
				Me.Onemp_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_minit", DbType:="Char(1)")>  _
	Public Property minit() As System.Nullable(Of Char)
		Get
			Return Me._minit
		End Get
		Set
			If (Me._minit.Equals(value) = false) Then
				Me.OnminitChanging(value)
				Me.SendPropertyChanging
				Me._minit = value
				Me.SendPropertyChanged("minit")
				Me.OnminitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lname", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property lname() As String
		Get
			Return Me._lname
		End Get
		Set
			If (String.Equals(Me._lname, value) = false) Then
				Me.OnlnameChanging(value)
				Me.SendPropertyChanging
				Me._lname = value
				Me.SendPropertyChanged("lname")
				Me.OnlnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_id", DbType:="SmallInt NOT NULL")>  _
	Public Property job_id() As Short
		Get
			Return Me._job_id
		End Get
		Set
			If ((Me._job_id = value)  _
						= false) Then
				If Me._job.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onjob_idChanging(value)
				Me.SendPropertyChanging
				Me._job_id = value
				Me.SendPropertyChanged("job_id")
				Me.Onjob_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_lvl", DbType:="TinyInt")>  _
	Public Property job_lvl() As System.Nullable(Of Byte)
		Get
			Return Me._job_lvl
		End Get
		Set
			If (Me._job_lvl.Equals(value) = false) Then
				Me.Onjob_lvlChanging(value)
				Me.SendPropertyChanging
				Me._job_lvl = value
				Me.SendPropertyChanged("job_lvl")
				Me.Onjob_lvlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pub_id", DbType:="Char(4) NOT NULL", CanBeNull:=false)>  _
	Public Property pub_id() As String
		Get
			Return Me._pub_id
		End Get
		Set
			If (String.Equals(Me._pub_id, value) = false) Then
				If Me._publisher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onpub_idChanging(value)
				Me.SendPropertyChanging
				Me._pub_id = value
				Me.SendPropertyChanged("pub_id")
				Me.Onpub_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hire_date", DbType:="DateTime NOT NULL")>  _
	Public Property hire_date() As Date
		Get
			Return Me._hire_date
		End Get
		Set
			If ((Me._hire_date = value)  _
						= false) Then
				Me.Onhire_dateChanging(value)
				Me.SendPropertyChanging
				Me._hire_date = value
				Me.SendPropertyChanged("hire_date")
				Me.Onhire_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="job_employee", Storage:="_job", ThisKey:="job_id", OtherKey:="job_id", IsForeignKey:=true)>  _
	Public Property job() As job
		Get
			Return Me._job.Entity
		End Get
		Set
			Dim previousValue As job = Me._job.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._job.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._job.Entity = Nothing
					previousValue.employees.Remove(Me)
				End If
				Me._job.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.employees.Add(Me)
					Me._job_id = value.job_id
				Else
					Me._job_id = CType(Nothing, Short)
				End If
				Me.SendPropertyChanged("job")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="publisher_employee", Storage:="_publisher", ThisKey:="pub_id", OtherKey:="pub_id", IsForeignKey:=true)>  _
	Public Property publisher() As publisher
		Get
			Return Me._publisher.Entity
		End Get
		Set
			Dim previousValue As publisher = Me._publisher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._publisher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._publisher.Entity = Nothing
					previousValue.employees.Remove(Me)
				End If
				Me._publisher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.employees.Add(Me)
					Me._pub_id = value.pub_id
				Else
					Me._pub_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("publisher")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.jobs")>  _
Partial Public Class job
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _job_id As Short
	
	Private _job_desc As String
	
	Private _min_lvl As Byte
	
	Private _max_lvl As Byte
	
	Private _employees As EntitySet(Of employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onjob_idChanging(value As Short)
    End Sub
    Partial Private Sub Onjob_idChanged()
    End Sub
    Partial Private Sub Onjob_descChanging(value As String)
    End Sub
    Partial Private Sub Onjob_descChanged()
    End Sub
    Partial Private Sub Onmin_lvlChanging(value As Byte)
    End Sub
    Partial Private Sub Onmin_lvlChanged()
    End Sub
    Partial Private Sub Onmax_lvlChanging(value As Byte)
    End Sub
    Partial Private Sub Onmax_lvlChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._employees = New EntitySet(Of employee)(AddressOf Me.attach_employees, AddressOf Me.detach_employees)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_id", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property job_id() As Short
		Get
			Return Me._job_id
		End Get
		Set
			If ((Me._job_id = value)  _
						= false) Then
				Me.Onjob_idChanging(value)
				Me.SendPropertyChanging
				Me._job_id = value
				Me.SendPropertyChanged("job_id")
				Me.Onjob_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job_desc", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property job_desc() As String
		Get
			Return Me._job_desc
		End Get
		Set
			If (String.Equals(Me._job_desc, value) = false) Then
				Me.Onjob_descChanging(value)
				Me.SendPropertyChanging
				Me._job_desc = value
				Me.SendPropertyChanged("job_desc")
				Me.Onjob_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_min_lvl", DbType:="TinyInt NOT NULL")>  _
	Public Property min_lvl() As Byte
		Get
			Return Me._min_lvl
		End Get
		Set
			If ((Me._min_lvl = value)  _
						= false) Then
				Me.Onmin_lvlChanging(value)
				Me.SendPropertyChanging
				Me._min_lvl = value
				Me.SendPropertyChanged("min_lvl")
				Me.Onmin_lvlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_max_lvl", DbType:="TinyInt NOT NULL")>  _
	Public Property max_lvl() As Byte
		Get
			Return Me._max_lvl
		End Get
		Set
			If ((Me._max_lvl = value)  _
						= false) Then
				Me.Onmax_lvlChanging(value)
				Me.SendPropertyChanging
				Me._max_lvl = value
				Me.SendPropertyChanged("max_lvl")
				Me.Onmax_lvlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="job_employee", Storage:="_employees", ThisKey:="job_id", OtherKey:="job_id")>  _
	Public Property employees() As EntitySet(Of employee)
		Get
			Return Me._employees
		End Get
		Set
			Me._employees.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_employees(ByVal entity As employee)
		Me.SendPropertyChanging
		entity.job = Me
	End Sub
	
	Private Sub detach_employees(ByVal entity As employee)
		Me.SendPropertyChanging
		entity.job = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.pub_info")>  _
Partial Public Class pub_info
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _pub_id As String
	
	Private _logo As System.Data.Linq.Binary
	
	Private _pr_info As String
	
	Private _publisher As EntityRef(Of publisher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onpub_idChanging(value As String)
    End Sub
    Partial Private Sub Onpub_idChanged()
    End Sub
    Partial Private Sub OnlogoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnlogoChanged()
    End Sub
    Partial Private Sub Onpr_infoChanging(value As String)
    End Sub
    Partial Private Sub Onpr_infoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._publisher = CType(Nothing, EntityRef(Of publisher))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pub_id", DbType:="Char(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property pub_id() As String
		Get
			Return Me._pub_id
		End Get
		Set
			If (String.Equals(Me._pub_id, value) = false) Then
				If Me._publisher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onpub_idChanging(value)
				Me.SendPropertyChanging
				Me._pub_id = value
				Me.SendPropertyChanged("pub_id")
				Me.Onpub_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logo", DbType:="Image", CanBeNull:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property logo() As System.Data.Linq.Binary
		Get
			Return Me._logo
		End Get
		Set
			If (Object.Equals(Me._logo, value) = false) Then
				Me.OnlogoChanging(value)
				Me.SendPropertyChanging
				Me._logo = value
				Me.SendPropertyChanged("logo")
				Me.OnlogoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pr_info", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property pr_info() As String
		Get
			Return Me._pr_info
		End Get
		Set
			If (String.Equals(Me._pr_info, value) = false) Then
				Me.Onpr_infoChanging(value)
				Me.SendPropertyChanging
				Me._pr_info = value
				Me.SendPropertyChanged("pr_info")
				Me.Onpr_infoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="publisher_pub_info", Storage:="_publisher", ThisKey:="pub_id", OtherKey:="pub_id", IsForeignKey:=true)>  _
	Public Property publisher() As publisher
		Get
			Return Me._publisher.Entity
		End Get
		Set
			Dim previousValue As publisher = Me._publisher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._publisher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._publisher.Entity = Nothing
					previousValue.pub_info = Nothing
				End If
				Me._publisher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.pub_info = Me
					Me._pub_id = value.pub_id
				Else
					Me._pub_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("publisher")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.publishers")>  _
Partial Public Class publisher
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _pub_id As String
	
	Private _pub_name As String
	
	Private _city As String
	
	Private _state As String
	
	Private _country As String
	
	Private _titles As EntitySet(Of title)
	
	Private _employees As EntitySet(Of employee)
	
	Private _pub_info As EntityRef(Of pub_info)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onpub_idChanging(value As String)
    End Sub
    Partial Private Sub Onpub_idChanged()
    End Sub
    Partial Private Sub Onpub_nameChanging(value As String)
    End Sub
    Partial Private Sub Onpub_nameChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OncountryChanging(value As String)
    End Sub
    Partial Private Sub OncountryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._titles = New EntitySet(Of title)(AddressOf Me.attach_titles, AddressOf Me.detach_titles)
		Me._employees = New EntitySet(Of employee)(AddressOf Me.attach_employees, AddressOf Me.detach_employees)
		Me._pub_info = CType(Nothing, EntityRef(Of pub_info))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pub_id", DbType:="Char(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property pub_id() As String
		Get
			Return Me._pub_id
		End Get
		Set
			If (String.Equals(Me._pub_id, value) = false) Then
				Me.Onpub_idChanging(value)
				Me.SendPropertyChanging
				Me._pub_id = value
				Me.SendPropertyChanged("pub_id")
				Me.Onpub_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pub_name", DbType:="VarChar(40)")>  _
	Public Property pub_name() As String
		Get
			Return Me._pub_name
		End Get
		Set
			If (String.Equals(Me._pub_name, value) = false) Then
				Me.Onpub_nameChanging(value)
				Me.SendPropertyChanging
				Me._pub_name = value
				Me.SendPropertyChanged("pub_name")
				Me.Onpub_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(20)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="Char(2)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_country", DbType:="VarChar(30)")>  _
	Public Property country() As String
		Get
			Return Me._country
		End Get
		Set
			If (String.Equals(Me._country, value) = false) Then
				Me.OncountryChanging(value)
				Me.SendPropertyChanging
				Me._country = value
				Me.SendPropertyChanged("country")
				Me.OncountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="publisher_title", Storage:="_titles", ThisKey:="pub_id", OtherKey:="pub_id")>  _
	Public Property titles() As EntitySet(Of title)
		Get
			Return Me._titles
		End Get
		Set
			Me._titles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="publisher_employee", Storage:="_employees", ThisKey:="pub_id", OtherKey:="pub_id")>  _
	Public Property employees() As EntitySet(Of employee)
		Get
			Return Me._employees
		End Get
		Set
			Me._employees.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="publisher_pub_info", Storage:="_pub_info", ThisKey:="pub_id", OtherKey:="pub_id", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property pub_info() As pub_info
		Get
			Return Me._pub_info.Entity
		End Get
		Set
			Dim previousValue As pub_info = Me._pub_info.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._pub_info.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._pub_info.Entity = Nothing
					previousValue.publisher = Nothing
				End If
				Me._pub_info.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.publisher = Me
				End If
				Me.SendPropertyChanged("pub_info")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_titles(ByVal entity As title)
		Me.SendPropertyChanging
		entity.publisher = Me
	End Sub
	
	Private Sub detach_titles(ByVal entity As title)
		Me.SendPropertyChanging
		entity.publisher = Nothing
	End Sub
	
	Private Sub attach_employees(ByVal entity As employee)
		Me.SendPropertyChanging
		entity.publisher = Me
	End Sub
	
	Private Sub detach_employees(ByVal entity As employee)
		Me.SendPropertyChanging
		entity.publisher = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.roysched")>  _
Partial Public Class roysched
	
	Private _title_id As String
	
	Private _lorange As System.Nullable(Of Integer)
	
	Private _hirange As System.Nullable(Of Integer)
	
	Private _royalty As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title_id", DbType:="VarChar(6) NOT NULL", CanBeNull:=false)>  _
	Public Property title_id() As String
		Get
			Return Me._title_id
		End Get
		Set
			If (String.Equals(Me._title_id, value) = false) Then
				Me._title_id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lorange", DbType:="Int")>  _
	Public Property lorange() As System.Nullable(Of Integer)
		Get
			Return Me._lorange
		End Get
		Set
			If (Me._lorange.Equals(value) = false) Then
				Me._lorange = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_hirange", DbType:="Int")>  _
	Public Property hirange() As System.Nullable(Of Integer)
		Get
			Return Me._hirange
		End Get
		Set
			If (Me._hirange.Equals(value) = false) Then
				Me._hirange = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_royalty", DbType:="Int")>  _
	Public Property royalty() As System.Nullable(Of Integer)
		Get
			Return Me._royalty
		End Get
		Set
			If (Me._royalty.Equals(value) = false) Then
				Me._royalty = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.sales")>  _
Partial Public Class sale
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _stor_id As String
	
	Private _ord_num As String
	
	Private _ord_date As Date
	
	Private _qty As Short
	
	Private _payterms As String
	
	Private _title_id As String
	
	Private _title As EntityRef(Of title)
	
	Private _store As EntityRef(Of store)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onstor_idChanging(value As String)
    End Sub
    Partial Private Sub Onstor_idChanged()
    End Sub
    Partial Private Sub Onord_numChanging(value As String)
    End Sub
    Partial Private Sub Onord_numChanged()
    End Sub
    Partial Private Sub Onord_dateChanging(value As Date)
    End Sub
    Partial Private Sub Onord_dateChanged()
    End Sub
    Partial Private Sub OnqtyChanging(value As Short)
    End Sub
    Partial Private Sub OnqtyChanged()
    End Sub
    Partial Private Sub OnpaytermsChanging(value As String)
    End Sub
    Partial Private Sub OnpaytermsChanged()
    End Sub
    Partial Private Sub Ontitle_idChanging(value As String)
    End Sub
    Partial Private Sub Ontitle_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._title = CType(Nothing, EntityRef(Of title))
		Me._store = CType(Nothing, EntityRef(Of store))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stor_id", DbType:="Char(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property stor_id() As String
		Get
			Return Me._stor_id
		End Get
		Set
			If (String.Equals(Me._stor_id, value) = false) Then
				If Me._store.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onstor_idChanging(value)
				Me.SendPropertyChanging
				Me._stor_id = value
				Me.SendPropertyChanged("stor_id")
				Me.Onstor_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ord_num", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ord_num() As String
		Get
			Return Me._ord_num
		End Get
		Set
			If (String.Equals(Me._ord_num, value) = false) Then
				Me.Onord_numChanging(value)
				Me.SendPropertyChanging
				Me._ord_num = value
				Me.SendPropertyChanged("ord_num")
				Me.Onord_numChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ord_date", DbType:="DateTime NOT NULL")>  _
	Public Property ord_date() As Date
		Get
			Return Me._ord_date
		End Get
		Set
			If ((Me._ord_date = value)  _
						= false) Then
				Me.Onord_dateChanging(value)
				Me.SendPropertyChanging
				Me._ord_date = value
				Me.SendPropertyChanged("ord_date")
				Me.Onord_dateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="SmallInt NOT NULL")>  _
	Public Property qty() As Short
		Get
			Return Me._qty
		End Get
		Set
			If ((Me._qty = value)  _
						= false) Then
				Me.OnqtyChanging(value)
				Me.SendPropertyChanging
				Me._qty = value
				Me.SendPropertyChanged("qty")
				Me.OnqtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_payterms", DbType:="VarChar(12) NOT NULL", CanBeNull:=false)>  _
	Public Property payterms() As String
		Get
			Return Me._payterms
		End Get
		Set
			If (String.Equals(Me._payterms, value) = false) Then
				Me.OnpaytermsChanging(value)
				Me.SendPropertyChanging
				Me._payterms = value
				Me.SendPropertyChanged("payterms")
				Me.OnpaytermsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title_id", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property title_id() As String
		Get
			Return Me._title_id
		End Get
		Set
			If (String.Equals(Me._title_id, value) = false) Then
				If Me._title.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontitle_idChanging(value)
				Me.SendPropertyChanging
				Me._title_id = value
				Me.SendPropertyChanged("title_id")
				Me.Ontitle_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="title_sale", Storage:="_title", ThisKey:="title_id", OtherKey:="title_id", IsForeignKey:=true)>  _
	Public Property title() As title
		Get
			Return Me._title.Entity
		End Get
		Set
			Dim previousValue As title = Me._title.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._title.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._title.Entity = Nothing
					previousValue.sales.Remove(Me)
				End If
				Me._title.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.sales.Add(Me)
					Me._title_id = value.title_id
				Else
					Me._title_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("title")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="store_sale", Storage:="_store", ThisKey:="stor_id", OtherKey:="stor_id", IsForeignKey:=true)>  _
	Public Property store() As store
		Get
			Return Me._store.Entity
		End Get
		Set
			Dim previousValue As store = Me._store.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._store.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._store.Entity = Nothing
					previousValue.sales.Remove(Me)
				End If
				Me._store.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.sales.Add(Me)
					Me._stor_id = value.stor_id
				Else
					Me._stor_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("store")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.stores")>  _
Partial Public Class store
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _stor_id As String
	
	Private _stor_name As String
	
	Private _stor_address As String
	
	Private _city As String
	
	Private _state As String
	
	Private _zip As String
	
	Private _sales As EntitySet(Of sale)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onstor_idChanging(value As String)
    End Sub
    Partial Private Sub Onstor_idChanged()
    End Sub
    Partial Private Sub Onstor_nameChanging(value As String)
    End Sub
    Partial Private Sub Onstor_nameChanged()
    End Sub
    Partial Private Sub Onstor_addressChanging(value As String)
    End Sub
    Partial Private Sub Onstor_addressChanged()
    End Sub
    Partial Private Sub OncityChanging(value As String)
    End Sub
    Partial Private Sub OncityChanged()
    End Sub
    Partial Private Sub OnstateChanging(value As String)
    End Sub
    Partial Private Sub OnstateChanged()
    End Sub
    Partial Private Sub OnzipChanging(value As String)
    End Sub
    Partial Private Sub OnzipChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._sales = New EntitySet(Of sale)(AddressOf Me.attach_sales, AddressOf Me.detach_sales)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stor_id", DbType:="Char(4) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property stor_id() As String
		Get
			Return Me._stor_id
		End Get
		Set
			If (String.Equals(Me._stor_id, value) = false) Then
				Me.Onstor_idChanging(value)
				Me.SendPropertyChanging
				Me._stor_id = value
				Me.SendPropertyChanged("stor_id")
				Me.Onstor_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stor_name", DbType:="VarChar(40)")>  _
	Public Property stor_name() As String
		Get
			Return Me._stor_name
		End Get
		Set
			If (String.Equals(Me._stor_name, value) = false) Then
				Me.Onstor_nameChanging(value)
				Me.SendPropertyChanging
				Me._stor_name = value
				Me.SendPropertyChanged("stor_name")
				Me.Onstor_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_stor_address", DbType:="VarChar(40)")>  _
	Public Property stor_address() As String
		Get
			Return Me._stor_address
		End Get
		Set
			If (String.Equals(Me._stor_address, value) = false) Then
				Me.Onstor_addressChanging(value)
				Me.SendPropertyChanging
				Me._stor_address = value
				Me.SendPropertyChanged("stor_address")
				Me.Onstor_addressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_city", DbType:="VarChar(20)")>  _
	Public Property city() As String
		Get
			Return Me._city
		End Get
		Set
			If (String.Equals(Me._city, value) = false) Then
				Me.OncityChanging(value)
				Me.SendPropertyChanging
				Me._city = value
				Me.SendPropertyChanged("city")
				Me.OncityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_state", DbType:="Char(2)")>  _
	Public Property state() As String
		Get
			Return Me._state
		End Get
		Set
			If (String.Equals(Me._state, value) = false) Then
				Me.OnstateChanging(value)
				Me.SendPropertyChanging
				Me._state = value
				Me.SendPropertyChanged("state")
				Me.OnstateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_zip", DbType:="Char(5)")>  _
	Public Property zip() As String
		Get
			Return Me._zip
		End Get
		Set
			If (String.Equals(Me._zip, value) = false) Then
				Me.OnzipChanging(value)
				Me.SendPropertyChanging
				Me._zip = value
				Me.SendPropertyChanged("zip")
				Me.OnzipChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="store_sale", Storage:="_sales", ThisKey:="stor_id", OtherKey:="stor_id")>  _
	Public Property sales() As EntitySet(Of sale)
		Get
			Return Me._sales
		End Get
		Set
			Me._sales.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_sales(ByVal entity As sale)
		Me.SendPropertyChanging
		entity.store = Me
	End Sub
	
	Private Sub detach_sales(ByVal entity As sale)
		Me.SendPropertyChanging
		entity.store = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.titleauthor")>  _
Partial Public Class titleauthor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _au_id As String
	
	Private _title_id As String
	
	Private _au_ord As System.Nullable(Of Byte)
	
	Private _royaltyper As System.Nullable(Of Integer)
	
	Private _author As EntityRef(Of author)
	
	Private _title As EntityRef(Of title)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onau_idChanging(value As String)
    End Sub
    Partial Private Sub Onau_idChanged()
    End Sub
    Partial Private Sub Ontitle_idChanging(value As String)
    End Sub
    Partial Private Sub Ontitle_idChanged()
    End Sub
    Partial Private Sub Onau_ordChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub Onau_ordChanged()
    End Sub
    Partial Private Sub OnroyaltyperChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnroyaltyperChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._author = CType(Nothing, EntityRef(Of author))
		Me._title = CType(Nothing, EntityRef(Of title))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_au_id", DbType:="VarChar(11) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property au_id() As String
		Get
			Return Me._au_id
		End Get
		Set
			If (String.Equals(Me._au_id, value) = false) Then
				If Me._author.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onau_idChanging(value)
				Me.SendPropertyChanging
				Me._au_id = value
				Me.SendPropertyChanged("au_id")
				Me.Onau_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title_id", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property title_id() As String
		Get
			Return Me._title_id
		End Get
		Set
			If (String.Equals(Me._title_id, value) = false) Then
				If Me._title.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Ontitle_idChanging(value)
				Me.SendPropertyChanging
				Me._title_id = value
				Me.SendPropertyChanged("title_id")
				Me.Ontitle_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_au_ord", DbType:="TinyInt")>  _
	Public Property au_ord() As System.Nullable(Of Byte)
		Get
			Return Me._au_ord
		End Get
		Set
			If (Me._au_ord.Equals(value) = false) Then
				Me.Onau_ordChanging(value)
				Me.SendPropertyChanging
				Me._au_ord = value
				Me.SendPropertyChanged("au_ord")
				Me.Onau_ordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_royaltyper", DbType:="Int")>  _
	Public Property royaltyper() As System.Nullable(Of Integer)
		Get
			Return Me._royaltyper
		End Get
		Set
			If (Me._royaltyper.Equals(value) = false) Then
				Me.OnroyaltyperChanging(value)
				Me.SendPropertyChanging
				Me._royaltyper = value
				Me.SendPropertyChanged("royaltyper")
				Me.OnroyaltyperChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="author_titleauthor", Storage:="_author", ThisKey:="au_id", OtherKey:="au_id", IsForeignKey:=true)>  _
	Public Property author() As author
		Get
			Return Me._author.Entity
		End Get
		Set
			Dim previousValue As author = Me._author.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._author.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._author.Entity = Nothing
					previousValue.titleauthors.Remove(Me)
				End If
				Me._author.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.titleauthors.Add(Me)
					Me._au_id = value.au_id
				Else
					Me._au_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("author")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="title_titleauthor", Storage:="_title", ThisKey:="title_id", OtherKey:="title_id", IsForeignKey:=true)>  _
	Public Property title() As title
		Get
			Return Me._title.Entity
		End Get
		Set
			Dim previousValue As title = Me._title.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._title.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._title.Entity = Nothing
					previousValue.titleauthors.Remove(Me)
				End If
				Me._title.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.titleauthors.Add(Me)
					Me._title_id = value.title_id
				Else
					Me._title_id = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("title")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
